declare namespace _default {
    export { isUncommentedExport };
    export { parse };
}
export default _default;
export type ValueObject = {
    value: string;
};
export type CreatedNode = {
    type?: string | undefined;
    value?: import("eslint").Rule.Node | ValueObject | undefined;
    props: {
        [key: string]: CreatedNode | null;
    };
    special?: true | undefined;
    globalVars?: CreatedNode | undefined;
    exported?: boolean | undefined;
    ANONYMOUS_DEFAULT?: import("eslint").Rule.Node | undefined;
};
export type CreateSymbol = (node: import('eslint').Rule.Node | null, globals: CreatedNode, value: import('eslint').Rule.Node | null, scope?: CreatedNode | undefined, isGlobal?: boolean | SymbolOptions | undefined) => CreatedNode | null;
export type SymbolOptions = {
    simpleIdentifier?: boolean;
};
/**
 *
 * @param {import('eslint').Rule.Node} node
 * @param {import('eslint').SourceCode} sourceCode
 * @param {import('./rules/requireJsdoc.js').RequireJsdocOpts} opt
 * @param {import('./iterateJsdoc.js').Settings} settings
 * @returns {boolean}
 */
declare function isUncommentedExport(node: import('eslint').Rule.Node, sourceCode: import('eslint').SourceCode, opt: import('./rules/requireJsdoc.js').RequireJsdocOpts, settings: import('./iterateJsdoc.js').Settings): boolean;
/**
 *
 * @param {import('eslint').Rule.Node} ast
 * @param {import('eslint').Rule.Node} node
 * @param {import('./rules/requireJsdoc.js').RequireJsdocOpts} opt
 * @returns {CreatedNode}
 */
declare function parse(ast: import('eslint').Rule.Node, node: import('eslint').Rule.Node, opt: import('./rules/requireJsdoc.js').RequireJsdocOpts): CreatedNode;
//# sourceMappingURL=exportParser.d.ts.map